#cloud-config
version: 1
chpasswd:
  list:
    - installer:$6$pzg8W2RsrQmqiLTt$DG29xpJ47feJ6T6EjBRxZMlym7.ksnPPFqRyMKCAN9YgDq6VasSAsx92uzZnRgYHCxsu/PvQoBy20TfgK1/rr1
# ssh_authorized_keys:
#   - <add-your-ssh-key-and-refresh-the-seed.iso-file>

autoinstall:
  version: 1
  refresh-installer:
    update: true
#  interactive-sections:
#  - storage

  # localization settings
  locale: de_DE.UTF-8
  timezone: Europe/Berlin
  keyboard:
    layout: de
    variant: nodeadkeys

  network:
    version: 2
    renderer: networkd
    ethernets:
      enp0s3:
        dhcp4: true
      enp0s8:
        dhcp4: false
        addresses:
          - 192.168.56.10/24

  # storage layout
  storage:
    config:
    ## general disk setup
    - id: disk-sda
      path: /dev/sda
      type: disk
      ptable: gpt
      wipe: superblock-recursive
      preserve: false
      grub_device: false

    ## unencrypted /boot partition for the kernel
    - id: boot
      device: disk-sda
      size: 1024MB
      wipe: superblock
      flag: ''
      preserve: false
      type: partition
    - id: boot-format
      fstype: ext4
      volume: boot
      preserve: false
      type: format
      label: BOOT
    - id: boot-mount
      device: boot-format
      path: /boot
      type: mount

    ## unencrypted /boot/efi partition for EFI boot environment
    - id: esp
      type: partition
      device: disk-sda
      grub_device: true
      size: 512MB
      flag: boot
    - id: esp-format
      type: format
      volume: esp
      fstype: fat32
      preserve: false
    - id: esp-mount
      type: mount
      device: esp-format
      path: /boot/efi

    ## LUKS encrypted partition holding the LVM
    - device: disk-sda
      size: -1
      wipe: superblock
      flag: ''
      preserve: false
      type: partition
      id: sda-crypt-partition
    - volume: sda-crypt-partition
      key: "virtualbox"
      preserve: false
      type: dm_crypt
      id: root_crypt
      dm_name: root_crypt

    ## LVM volumegroup vg0 holding the machines partitions
    - name: vg0
      devices: [root_crypt]
      preserve: false
      type: lvm_volgroup
      id: vg0

    ## /root logical partition
    - name: root
      volgroup: vg0
      size: 10GB
      preserve: false
      type: lvm_partition
      id: root-partition
    - fstype: ext4
      volume: root-partition
      preserve: false
      type: format
      id: root-format
    - device: root-format
      path: /
      type: mount
      id: root-mount

    ## /var logical partition
    - name: var
      volgroup: vg0
      size: 10GB
      preserve: false
      type: lvm_partition
      id: var-partition
    - fstype: ext4
      volume: var-partition
      preserve: false
      type: format
      id: var-format
    - device: var-format
      path: /var
      type: mount
      id: var-mount

    ## /var/lib/docker partition (for kind container image storage)
    - name: docker
      volgroup: vg0
      size: -1
      preserve: false
      type: lvm_partition
      id: docker-partition
    - fstype: ext4
      volume: docker-partition
      preserve: false
      type: format
      id: docker-format
    - device: docker-format
      path: /var/lib/docker
      type: mount
      id: docker-mount

  early-commands:
    - echo "early commands are running"
    - echo "one could 'wget -O /autoinstall.yaml <http://some.file.template>'"
    - echo "and sed/awk the template in /autoinstall.yaml to kustomize it further"
    - echo "once all early-commands are run, /autoinstall.yaml will be re-read by subiquity - making more dynamic things possible"
   
  # user management
  identity:
    hostname: kind-vm
    password: $6$pzg8W2RsrQmqiLTt$DG29xpJ47feJ6T6EjBRxZMlym7.ksnPPFqRyMKCAN9YgDq6VasSAsx92uzZnRgYHCxsu/PvQoBy20TfgK1/rr1
    username: virtualbox

  ssh:
    install-server: yes
    allow-pw: yes
    # authorized-keys:
    #   - <add-your-ssh-key-and-refresh-the-seed.iso-file>

  # software configuration
  apt:
    preserve_sources_list: false
    sources_list: |
      deb $MIRROR $RELEASE main restricted
      deb $MIRROR $RELEASE-updates main restricted
      deb $MIRROR $RELEASE universe
      deb $MIRROR $RELEASE-updates universe
      deb $MIRROR $RELEASE multiverse
      deb $MIRROR $RELEASE-updates multiverse
      deb $MIRROR $RELEASE-backports main restricted universe multiverse
      deb $SECURITY $RELEASE-security main restricted
      deb $SECURITY $RELEASE-security universe
      deb $SECURITY $RELEASE-security multiverse
  updates: 'security'
 
  packages:
    - build-essential
    - software-properties-common
    - net-tools
    - git

  late-commands:
    - |
      cat > /target/root/kind.sh.b64 << EOF
      
      EOF
    - base64 -d /target/root/kind.sh.b64 > /target/root/kind.sh
    - chmod 755 /target/root/kind.sh
    - echo "root_crypt /dev/sda3 none luks,discard" > /target/etc/crypttab
    - echo "blacklist floppy" > /target/etc/modprobe.d/blacklist-floppy.conf
    - curtin in-target --target=/target -- hostnamectl set-hostname kind-vm
    - curtin in-target --target=/target -- sed -i -e "s/GRUB_TIMEOUT_STYLE=hidden/GRUB_TIMEOUT_STYLE=menu/" /etc/default/grub
    - curtin in-target --target=/target -- sed -i -e "s/GRUB_TIMEOUT=0/GRUB_TIMEOUT=10/" /etc/default/grub
    - curtin in-target --target=/target -- sed -i -e "s/#GRUB_TERMINAL/GRUB_TERMINAL/" /etc/default/grub
    - curtin in-target --target=/target -- update-grub
    - curtin in-target --target=/target -- update-initramfs -u
